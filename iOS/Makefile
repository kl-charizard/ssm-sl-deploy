# iOS Sign Language Detector Makefile
# Provides convenient commands for iOS development and deployment

.PHONY: help setup convert build run test clean archive

# Default target
help:
	@echo "ü§ü iOS Sign Language Detector - Available Commands:"
	@echo ""
	@echo "üìã Setup & Preparation:"
	@echo "  setup          - Install dependencies and prepare environment"
	@echo "  convert        - Convert PyTorch model to Core ML format"
	@echo "  convert-opt    - Convert and optimize model for mobile"
	@echo ""
	@echo "üî® Development:"
	@echo "  build          - Build the iOS project"
	@echo "  run            - Build and run on simulator"
	@echo "  run-device     - Build and run on connected device"
	@echo "  test           - Run unit tests"
	@echo "  clean          - Clean build artifacts"
	@echo ""
	@echo "üì± Deployment:"
	@echo "  archive        - Create archive for distribution"
	@echo "  testflight     - Upload to TestFlight"
	@echo "  appstore       - Upload to App Store"
	@echo ""
	@echo "üîß Utilities:"
	@echo "  open           - Open project in Xcode"
	@echo "  simulator      - Open iOS Simulator"
	@echo "  devices        - List connected devices"
	@echo "  logs           - Show device logs"

# Variables
MODEL_PATH ?= ../checkpoints/best_model.pth
MODEL_NAME ?= SignLanguageModel
PROJECT_NAME = SignLanguageDetector
SCHEME = SignLanguageDetector
CONFIGURATION ?= Release

# Setup environment
setup:
	@echo "üîß Setting up iOS development environment..."
	@echo "Installing Python dependencies..."
	pip install coremltools
	@echo "‚úÖ Setup complete!"

# Convert PyTorch model to Core ML
convert:
	@echo "üîÑ Converting PyTorch model to Core ML..."
	@if [ ! -f "$(MODEL_PATH)" ]; then \
		echo "‚ùå Error: Model file not found at $(MODEL_PATH)"; \
		echo "Please train a model first or specify MODEL_PATH"; \
		exit 1; \
	fi
	python ../scripts/convert_to_coreml.py \
		--model-path "$(MODEL_PATH)" \
		--output-path "$(PROJECT_NAME)/$(MODEL_NAME).mlmodel"
	@echo "‚úÖ Model converted successfully!"

# Convert and optimize model
convert-opt: convert
	@echo "‚ö° Optimizing model for mobile deployment..."
	python ../scripts/convert_to_coreml.py \
		--model-path "$(MODEL_PATH)" \
		--output-path "$(PROJECT_NAME)/$(MODEL_NAME).mlmodel" \
		--optimize
	@echo "‚úÖ Model converted and optimized!"

# Build the project
build:
	@echo "üî® Building iOS project..."
	xcodebuild \
		-project "$(PROJECT_NAME).xcodeproj" \
		-scheme "$(SCHEME)" \
		-configuration "$(CONFIGURATION)" \
		build
	@echo "‚úÖ Build complete!"

# Run on simulator
run:
	@echo "üì± Running on iOS Simulator..."
	xcodebuild \
		-project "$(PROJECT_NAME).xcodeproj" \
		-scheme "$(SCHEME)" \
		-destination "platform=iOS Simulator,name=iPhone 14" \
		build
	@echo "‚úÖ App launched on simulator!"

# Run on connected device
run-device:
	@echo "üì± Running on connected device..."
	@DEVICE_ID=$$(xcrun xctrace list devices | grep "iPhone\|iPad" | head -1 | grep -o '\[.*\]' | tr -d '[]'); \
	if [ -z "$$DEVICE_ID" ]; then \
		echo "‚ùå No connected device found. Please connect an iPhone or iPad."; \
		exit 1; \
	fi; \
	echo "Using device: $$DEVICE_ID"; \
	xcodebuild \
		-project "$(PROJECT_NAME).xcodeproj" \
		-scheme "$(SCHEME)" \
		-destination "platform=iOS,id=$$DEVICE_ID" \
		build
	@echo "‚úÖ App launched on device!"

# Run tests
test:
	@echo "üß™ Running unit tests..."
	xcodebuild test \
		-project "$(PROJECT_NAME).xcodeproj" \
		-scheme "$(SCHEME)" \
		-destination "platform=iOS Simulator,name=iPhone 14"
	@echo "‚úÖ Tests complete!"

# Clean build artifacts
clean:
	@echo "üßπ Cleaning build artifacts..."
	xcodebuild clean \
		-project "$(PROJECT_NAME).xcodeproj" \
		-scheme "$(SCHEME)"
	rm -rf DerivedData
	@echo "‚úÖ Clean complete!"

# Create archive for distribution
archive:
	@echo "üì¶ Creating archive for distribution..."
	xcodebuild archive \
		-project "$(PROJECT_NAME).xcodeproj" \
		-scheme "$(SCHEME)" \
		-configuration "$(CONFIGURATION)" \
		-archivePath "build/$(PROJECT_NAME).xcarchive"
	@echo "‚úÖ Archive created at build/$(PROJECT_NAME).xcarchive"

# Upload to TestFlight
testflight: archive
	@echo "üöÄ Uploading to TestFlight..."
	xcodebuild -exportArchive \
		-archivePath "build/$(PROJECT_NAME).xcarchive" \
		-exportPath "build/TestFlight" \
		-exportOptionsPlist "ExportOptions-TestFlight.plist"
	@echo "‚úÖ Uploaded to TestFlight!"

# Upload to App Store
appstore: archive
	@echo "üè™ Uploading to App Store..."
	xcodebuild -exportArchive \
		-archivePath "build/$(PROJECT_NAME).xcarchive" \
		-exportPath "build/AppStore" \
		-exportOptionsPlist "ExportOptions-AppStore.plist"
	@echo "‚úÖ Uploaded to App Store!"

# Open project in Xcode
open:
	@echo "üîß Opening project in Xcode..."
	open "$(PROJECT_NAME).xcodeproj"

# Open iOS Simulator
simulator:
	@echo "üì± Opening iOS Simulator..."
	open -a Simulator

# List connected devices
devices:
	@echo "üì± Connected devices:"
	xcrun xctrace list devices

# Show device logs
logs:
	@echo "üìã Device logs (press Ctrl+C to stop):"
	xcrun simctl spawn booted log stream --predicate 'processImagePath contains "SignLanguageDetector"'

# Create export options plists
create-export-plists:
	@echo "üìÑ Creating export options plists..."
	@mkdir -p build
	@cat > build/ExportOptions-TestFlight.plist << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>app-store</string>
    <key>teamID</key>
    <string>YOUR_TEAM_ID</string>
    <key>uploadBitcode</key>
    <false/>
    <key>uploadSymbols</key>
    <true/>
    <key>compileBitcode</key>
    <false/>
</dict>
</plist>
EOF
	@cat > build/ExportOptions-AppStore.plist << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>app-store</string>
    <key>teamID</key>
    <string>YOUR_TEAM_ID</string>
    <key>uploadBitcode</key>
    <false/>
    <key>uploadSymbols</key>
    <true/>
    <key>compileBitcode</key>
    <false/>
</dict>
</plist>
EOF
	@echo "‚úÖ Export options plists created!"
	@echo "‚ö†Ô∏è  Remember to update YOUR_TEAM_ID in the plist files"

# Quick development workflow
dev: clean convert build run
	@echo "üöÄ Development workflow complete!"

# Full deployment workflow
deploy: clean convert-opt build test archive
	@echo "üöÄ Deployment workflow complete!"

# Show project info
info:
	@echo "üìä Project Information:"
	@echo "  Project: $(PROJECT_NAME)"
	@echo "  Scheme: $(SCHEME)"
	@echo "  Configuration: $(CONFIGURATION)"
	@echo "  Model Path: $(MODEL_PATH)"
	@echo "  Model Name: $(MODEL_NAME)"
	@echo ""
	@echo "üì± Available Simulators:"
	@xcrun simctl list devices | grep "iPhone\|iPad" | head -5
	@echo ""
	@echo "üîó Connected Devices:"
	@xcrun xctrace list devices | grep "iPhone\|iPad" || echo "  No devices connected"
